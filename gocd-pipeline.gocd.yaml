format_version: 10
pipelines:
  GOCD-pipeline-as-code:
    group: defaultGroup
    label_template: ${COUNT}
    lock_behavior: none
    display_order: -1
    materials:
      git-c05074b:
        git: https://github.com/suryaveerubhotla/simple-ui.git
        shallow_clone: false
        auto_update: true
        branch: main
    stages:
      - Deploy-and-test:
          fetch_materials: true
          keep_artifacts: false
          clean_workspace: false
          approval:
            type: manual
            allow_only_on_success: false
          jobs:
            run-commands:
              timeout: 0
              variables:
                BUILD_DIR: /home/ubuntu/builds
                BE_TARGET_DIR: /home/ubuntu/prime
                UI_TARGET_DIR: /var/www/html
                BE_ARCHIVE_DIR: /home/ubuntu/archive
                UI_ARCHIVE_DIR: /home/ubuntu/ui-archive
                SERVICE: PrimeSquare.service
                BE_TEMP_DIR: ${BE_ARCHIVE_DIR}/temp-extract
                UI_TEMP_DIR: ${UI_ARCHIVE_DIR}/temp-extract
              tasks:
                - exec:
                    command: /bin/bash
                    arguments:
                      - -c
                      - |
                        echo "Exporting environment variables..."
                        export BUILD_DIR=/home/ubuntu/builds
                        export BE_TARGET_DIR=/home/ubuntu/prime
                        export UI_TARGET_DIR=/var/www/html
                        export BE_ARCHIVE_DIR=/home/ubuntu/archive
                        export UI_ARCHIVE_DIR=/home/ubuntu/ui-archive
                        export BE_TEMP_DIR=${BE_ARCHIVE_DIR}/temp-extract
                        export UI_TEMP_DIR=${UI_ARCHIVE_DIR}/temp-extract
                        export SERVICE=PrimeSquare.service

                        echo "Processing backend (ps_be)..."
                        BE_ZIP=$(ls ${BUILD_DIR}/ps_be*.zip 2>/dev/null | head -n 1)

                        if [ -z "${BE_ZIP}" ]; then
                          echo "No ps_be zip file found in ${BUILD_DIR}!"
                          exit 1
                        fi

                        echo "Found backend zip: ${BE_ZIP}"

                        mkdir -p "${BE_TEMP_DIR}" "${BE_ARCHIVE_DIR}" || { echo "Failed to create backend directories"; exit 1; }
                        unzip -o "${BE_ZIP}" -d "${BE_TEMP_DIR}" || { echo "Failed to unzip ps_be"; exit 1; }

                        JAR_FILE=$(find "${BE_TEMP_DIR}" -type f -name "core-*.jar" | head -n 1)

                        if [ -z "${JAR_FILE}" ]; then
                          echo "No core-*.jar file found in the ps_be zip!"
                          exit 1
                        fi

                        echo "Replacing jar in ${BE_TARGET_DIR}..."
                        mkdir -p "${BE_TARGET_DIR}" || { echo "Failed to create ${BE_TARGET_DIR}"; exit 1; }
                        cp "${JAR_FILE}" "${BE_TARGET_DIR}" || { echo "Failed to copy JAR file"; exit 1; }
                        rm -rf "${BE_TEMP_DIR}" || { echo "Failed to clean up BE temp dir"; exit 1; }

                        echo "Processing frontend (ps_ui)..."
                        UI_ZIP=$(ls ${BUILD_DIR}/ps_ui*.zip 2>/dev/null | head -n 1)

                        if [ -z "${UI_ZIP}" ]; then
                          echo "No ps_ui zip file found in ${BUILD_DIR}!"
                          exit 1
                        fi

                        echo "Found frontend zip: ${UI_ZIP}"

                        mkdir -p "${UI_TEMP_DIR}" "${UI_ARCHIVE_DIR}" || { echo "Failed to create UI directories"; exit 1; }
                        unzip -o "${UI_ZIP}" -d "${UI_TEMP_DIR}" || { echo "Failed to unzip ps_ui"; exit 1; }

                        echo "Replacing files in ${UI_TARGET_DIR}..."
                        mkdir -p "${UI_TARGET_DIR}" || { echo "Failed to create ${UI_TARGET_DIR}"; exit 1; }
                        rm -rf "${UI_TARGET_DIR}"/* || { echo "Failed to clean ${UI_TARGET_DIR}"; exit 1; }
                        cp -r "${UI_TEMP_DIR}"/* "${UI_TARGET_DIR}" || { echo "Failed to copy UI files"; exit 1; }
                        rm -rf "${UI_TEMP_DIR}" || { echo "Failed to clean up UI temp dir"; exit 1; }

                        echo "Restarting backend service..."
                        sudo systemctl restart ${SERVICE} || { echo "Failed to restart ${SERVICE}"; exit 1; }

                        echo "Restarting Apache2..."
                        sudo systemctl restart apache2 || { echo "Failed to restart Apache2"; exit 1; }

                        echo "Deployment complete."
              run_if: passed
environments:
  deployandtest:
    pipelines:
      - GOCD-pipeline-as-code
