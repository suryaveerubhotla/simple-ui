format_version: 10
pipelines:
  backend-deployment:
    group: backend-group
    label_template: ${COUNT}
    materials:
      git-backend:
        git: https://github.com/suryaveerubhotla/simple-ui.git
        shallow_clone: false
        auto_update: true
        branch: main
    stages:
      - Deploy:
          fetch_materials: true
          approval:
            type: manual
          jobs:
            Deploy-BE:
              tasks:
                - exec:
                    command: /bin/bash
                    arguments:
                      - -c
                      - |
                        echo "Exporting environment variables..."
                        export BUILD_DIR=/home/ubuntu/builds
                        export BE_TARGET_DIR=/home/ubuntu/prime-square
                        export BE_ARCHIVE_DIR=/home/ubuntu/archive
                        export SERVICE=PrimeSquare.service  
                        export SFTP_HOST=172.16.7.116
                        export SFTP_USER=surya
                        export SFTP_KEY=/var/go/.ssh/id_rsa
                        export SFTP_UPLOADS_DIR=uploads
                        export BUILD_FILE="ps_be_1.1.26_idfc_1.1.13-9f56559-321.zip"
                        export BACKUP_DIR=/home/ubuntu/prime-square-backup

                        echo "Checking if BUILD_DIR exists..."
                        if [ -d "${BUILD_DIR}" ]; then
                          echo "BUILD_DIR exists. Removing all contents..."
                          sudo rm -rf ${BUILD_DIR}/* || { echo "Failed to remove contents in ${BUILD_DIR}"; exit 1; }
                        else
                          echo "BUILD_DIR does not exist. Creating ${BUILD_DIR}..."
                          sudo mkdir -p "${BUILD_DIR}" || { echo "Failed to create ${BUILD_DIR}"; exit 1; }
                        fi
                        
                        echo "Setting permissions for BUILD_DIR"..
                        sudo chmod -R 775 "${BUILD_DIR}" || { echo "Failed to set permissions for BUILD_DIR"; exit 1; }
                        sudo chown -R go:go "${BUILD_DIR}" || { echo "Failed to change ownership of BUILD_DIR"; exit 1; }

                        echo "Checking for BACKUP_DIR"
                        if [ ! -d "${BACKUP_DIR}" ]; then
                          echo "BACKUP_DIR does not exist. Creating ${BACKUP_DIR}..."
                         sudo mkdir -p "${BACKUP_DIR}" || { echo "Failed to create ${BACKUP_DIR}"; exit 1; }
                        else
                          echo "BACKUP_DIR exists. Using existing ${BACKUP_DIR}..."
                        fi

                        
                        echo "Checking if BE_TARGET_DIR exists..."
                        if [ -d "${BE_TARGET_DIR}" ]; then
                          echo "BE_TARGET_DIR exists. moving all contents from BE_TARGET_DIR to BACKUP_DIR..."
                          sudo mv ${BE_TARGET_DIR} "${BACKUP_DIR}" || { echo "Failed to move contents in ${BE_TARGET_DIR} to ${BACKUP_DIR}"; exit 1; }
                        else
                          echo "BE_TARGET_DIR does not exist. Creating ${BE_TARGET_DIR}..."
                          sudo mkdir -p "${BE_TARGET_DIR}" || { echo "Failed to create ${BE_TARGET_DIR}"; exit 1; }
                        fi
                        

                        echo "Checking if service ${SERVICE} exists..."
                        if [ -f /etc/systemd/system/${SERVICE} ]; then
                          echo "${SERVICE} exists. Checking service status..."
                          sudo systemctl status ${SERVICE} > /dev/null 2>&1
                          if [ $? -eq 0 ]; then
                            echo "${SERVICE} is running. Stopping the service..."
                            sudo systemctl stop ${SERVICE} || { echo "Failed to stop ${SERVICE}"; exit 1; }
                          else
                            echo "${SERVICE} is not running."
                          fi
                        else
                          echo "${SERVICE} does not exist. Proceeding..."
                        fi

                        echo "Accessing SFTP machine to fetch the specified backend zip file..."
                        sudo -u go sftp -o StrictHostKeyChecking=no -i ${SFTP_KEY} ${SFTP_USER}@${SFTP_HOST} <<EOF
                        cd ${SFTP_UPLOADS_DIR}
                        get ${BUILD_FILE} ${BUILD_DIR}/
                        bye
                        EOF


                        if [ $? -ne 0 ]; then
                          echo "Failed to fetch the specified backend zip file from SFTP."
                          exit 1
                        fi

                        echo "Unzipping the backend artifacts to BE_TARGET_DIR..."
                        sudo unzip -o "${BUILD_DIR}/${BUILD_FILE}" -d "${BE_TARGET_DIR}" || { echo "Failed to unzip backend.zip"; exit 1; }

                        echo "Setting ownership and permissions for files in BE_TARGET_DIR..."
                        sudo chown -R ubuntu:ubuntu "${BE_TARGET_DIR}" || { echo "Failed to change ownership of files in BE_TARGET_DIR"; exit 1; }
                        sudo chmod 644 "${BE_TARGET_DIR}"/*.properties "${BE_TARGET_DIR}"/*.jar "${BE_TARGET_DIR}"/*.sh || { echo "Failed to set permissions for files"; exit 1; }
                        sudo chmod 755 "${BE_TARGET_DIR}/wrapper.sh" || { echo "Failed to set executable permission for wrapper.sh"; exit 1; }
                        sudo chmod 755 "${BE_TARGET_DIR}" || { echo "Failed to set permissions for BE_TARGET_DIR"; exit 1; }

                        echo "Listing extracted files in BE_TARGET_DIR..."
                        sudo ls -l "${BE_TARGET_DIR}"

                        echo "Checking and copying service file if needed..."
                        if [ ! -f /etc/systemd/system/${SERVICE} ]; then
                          sudo cp "${BE_TARGET_DIR}/service/${SERVICE}" /etc/systemd/system/ || { echo "Failed to copy service file"; exit 1; }
                          echo "Enabling the service..."
                          sudo systemctl enable ${SERVICE} || { echo "Failed to enable ${SERVICE}"; exit 1; }
                        else
                          echo "Service file already exists. Skipping copy."
                        fi

                        echo "Reloading systemd daemon..."
                        sudo systemctl daemon-reload || { echo "Failed to reload systemd daemon"; exit 1; }

                        echo "Starting service..."
                        sudo systemctl start ${SERVICE} || { echo "Failed to start ${SERVICE}"; exit 1; }
                        sudo systemctl status ${SERVICE}

                        echo "Deployment complete."

              resources:
                - ubuntu
            
environments:
  Frontandbackend:
    pipelines:
      - backend-deployment
