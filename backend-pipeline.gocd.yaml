format_version: 10
pipelines:
  backend-deployment:
    group: deployment-group
    label_template: ${COUNT}
    lock_behavior: none
    display_order: 1
    materials:
      git-backend:
        git: https://github.com/suryaveerubhotla/simple-ui.git
        shallow_clone: false
        auto_update: true
        branch: main
    stages:
      - Deploy:
          fetch_materials: true
          keep_artifacts: false
          clean_workspace: false
          approval:
            type: manual
          jobs:
            run-commands:
              timeout: 0
              variables:
                BUILD_DIR: /home/ubuntu/builds
                BE_TARGET_DIR: /home/ubuntu/prime-square
                BE_ARCHIVE_DIR: /home/ubuntu/archive
                SERVICE: PrimeSquare.service
                DB_SCRIPTS_DIR: /home/ubuntu/prime-square/database-scripts
                DB_USER: psdbadmin
                DB_PASS: 6%EOm@Te1sb19Th6
              tasks:
                - exec:
                    command: /bin/bash
                    arguments:
                      - -c
                      - |
                        echo "Exporting environment variables..."
                        export BUILD_DIR=/home/ubuntu/builds
                        export BE_TARGET_DIR=/home/ubuntu/prime-square
                        export BE_ARCHIVE_DIR=/home/ubuntu/archive
                        export SERVICE=PrimeSquare.service

                        echo "Creating target directory..."
                        mkdir -p "${BE_TARGET_DIR}" || { echo "Failed to create ${BE_TARGET_DIR}"; exit 1; }

                        echo "Unzipping backend artifacts..."
                        BE_ZIP=$(ls ${BUILD_DIR}/ps_be*.zip 2>/dev/null | head -n 1)
                        if [ -z "${BE_ZIP}" ]; then
                          echo "No ps_be zip file found in ${BUILD_DIR}!"
                          exit 1
                        fi
                        unzip -o "${BE_ZIP}" -d "${BE_TARGET_DIR}" || { echo "Failed to unzip ps_be"; exit 1; }

                        echo "Changing permissions to ubuntu:ubuntu..."
                        sudo chown -R ubuntu:ubuntu "${BE_TARGET_DIR}" || { echo "Failed to change ownership"; exit 1; }

                        echo "Copying service file..."
                        sudo cp "${BE_TARGET_DIR}/service/PrimeSquare.service" /etc/systemd/system/ || { echo "Failed to copy service file"; exit 1; }

                        echo "Making wrapper.sh executable..."
                        sudo chmod +x "${BE_TARGET_DIR}/wrapper.sh" || { echo "Failed to make wrapper.sh executable"; exit 1; }

                        echo "Reloading systemd daemon..."
                        sudo systemctl daemon-reload || { echo "Failed to reload systemd daemon"; exit 1; }

                        echo "Giving execute permissions to database scripts..."
                        sudo chmod -R +x "${DB_SCRIPTS_DIR}" || { echo "Failed to give execute permissions to database scripts"; exit 1; }

                        echo "Executing database scripts..."
                        mysql < "${DB_SCRIPTS_DIR}/ddl_drop_schema_script.sql" -u ${DB_USER} -p${DB_PASS} || { echo "Failed to execute ddl_drop_schema_script.sql"; exit 1; }
                        mysql < "${DB_SCRIPTS_DIR}/primesquare_workflow_ddl_dml.sql" -u ${DB_USER} -p${DB_PASS} || { echo "Failed to execute primesquare_workflow_ddl_dml.sql"; exit 1; }
                        mysql < "${DB_SCRIPTS_DIR}/ddl_create_scripts.sql" -u ${DB_USER} -p${DB_PASS} || { echo "Failed to execute ddl_create_scripts.sql"; exit 1; }
                        mysql < "${DB_SCRIPTS_DIR}/dml_insert_scripts.sql" -u ${DB_USER} -p${DB_PASS} || { echo "Failed to execute dml_insert_scripts.sql"; exit 1; }
                        mysql < "${DB_SCRIPTS_DIR}/PS_Index.sql" -u ${DB_USER} -p${DB_PASS} || { echo "Failed to execute PS_Index.sql"; exit 1; }

                        echo "Enabling and starting service..."
                        sudo systemctl enable ${SERVICE} || { echo "Failed to enable ${SERVICE}"; exit 1; }
                        sudo systemctl start ${SERVICE} || { echo "Failed to start ${SERVICE}"; exit 1; }

                        echo "Checking service status..."
                        sudo systemctl status ${SERVICE}

                        echo "Deployment complete."
              resources:
                - ubuntu
              environment_variables:
                GOCD_ENVIRONMENT: Frontandbackend

environments:
  Frontandbackend:
    pipelines:
      - backend-deployment