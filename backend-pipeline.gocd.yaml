format_version: 10
pipelines:
  backend-deployment:
    group: backend-group
    label_template: "${COUNT}"
    lock_behavior: none
    display_order: 1
    parameters:
      BUILD_DIR: "/home/ubuntu/builds"
      BE_TARGET_DIR: "/home/ubuntu/prime-square"
      BE_ARCHIVE_DIR: "/home/ubuntu/archive"
      DB_SCRIPTS_DIR: "/home/ubuntu/prime-square/database-scripts"
      SERVICE: "PrimeSquare.service"
      SFTP_HOST: "192.168.56.106"
      SFTP_USER: "surya"
      SFTP_KEY: "/var/go/.ssh/id_rsa"
      SFTP_UPLOADS_DIR: "uploads"
    materials:
      git-backend:
        git: https://github.com/suryaveerubhotla/simple-ui.git
        shallow_clone: true
        auto_update: true
        branch: main
    stages:
      - Deploy:
          fetch_materials: true
          keep_artifacts: false
          clean_workspace: false
          approval:
            type: manual
          jobs:
            run-commands:
              timeout: 0
              tasks:
                - exec:
                    command: /bin/bash
                    arguments:
                      - -c
                      - |
                        echo "Fetching environment variables..."
                        export DB_PASS=$(cat /var/go/secrets/db_pass)
                        if [ -z "${DB_PASS}" ]; then
                          echo "Database password not set!"
                          exit 1
                        fi
                        
                        echo "Setting up directories..."
                        for DIR in "${BUILD_DIR}" "${BE_TARGET_DIR}"; do
                          if [ -d "${DIR}" ]; then
                            echo "${DIR} exists. Cleaning..."
                            sudo rm -rf ${DIR}/*
                          else
                            echo "${DIR} does not exist. Creating..."
                            sudo mkdir -p "${DIR}"
                          fi
                          sudo chmod -R 775 "${DIR}"
                          sudo chown -R go:go "${DIR}"
                        done

                        echo "Fetching latest build file from SFTP..."
                        LATEST_FILE=$(sudo -u go sftp -o StrictHostKeyChecking=no -i ${SFTP_KEY} ${SFTP_USER}@${SFTP_HOST} <<EOF
                        cd ${SFTP_UPLOADS_DIR}
                        ls -t | head -n 1
                        bye
                        EOF
                        )
                        if [ -z "${LATEST_FILE}" ]; then
                          echo "No files found in SFTP directory."
                          exit 1
                        fi
                        echo "Latest file: ${LATEST_FILE}"

                        echo "Downloading latest build file..."
                        sudo -u go sftp -o StrictHostKeyChecking=no -i ${SFTP_KEY} ${SFTP_USER}@${SFTP_HOST} <<EOF
                        cd ${SFTP_UPLOADS_DIR}
                        get ${LATEST_FILE} ${BUILD_DIR}/
                        bye
                        EOF
                        if [ $? -ne 0 ]; then
                          echo "Failed to download latest build file."
                          exit 1
                        fi

                        echo "Unzipping build file..."
                        sudo unzip -o "${BUILD_DIR}/${LATEST_FILE}" -d "${BE_TARGET_DIR}" || { echo "Failed to unzip build file"; exit 1; }

                        echo "Setting up the service..."
                        if [ -f /etc/systemd/system/${SERVICE} ]; then
                          sudo systemctl stop ${SERVICE}
                        else
                          sudo cp "${BE_TARGET_DIR}/service/${SERVICE}" /etc/systemd/system/ || { echo "Failed to copy service file"; exit 1; }
                          sudo systemctl enable ${SERVICE}
                        fi

                        echo "Reloading systemd daemon..."
                        sudo systemctl daemon-reload

                        echo "Executing database scripts..."
                        for SCRIPT in ddl_drop_schema_script.sql idfc_primesquare_workflow_ddl_dml.sql ddl_create_scripts.sql dml_insert_scripts.sql ps_index_create.sql; do
                          mysql < "${DB_SCRIPTS_DIR}/${SCRIPT}" -u psdbadmin -p"${DB_PASS}" || { echo "Failed to execute ${SCRIPT}"; exit 1; }
                        done

                        echo "Starting service..."
                        sudo systemctl start ${SERVICE}
                        sudo systemctl status ${SERVICE}
                        
                        echo "Deployment completed successfully."
              resources:
                - ubuntu
              environment_variables:
                GOCD_ENVIRONMENT: Frontandbackend

environments:
  Frontandbackend:
    pipelines:
      - backend-deployment
